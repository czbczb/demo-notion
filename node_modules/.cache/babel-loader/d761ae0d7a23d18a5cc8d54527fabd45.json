{"ast":null,"code":"export var getCaretCoordinates = function getCaretCoordinates() {\n  var x, y;\n  var isSupported = typeof window.getSelection !== \"undefined\";\n\n  if (isSupported) {\n    var selection = window.getSelection(); // Check if there is a selection (i.e. cursor in place)\n\n    if (selection.rangeCount !== 0) {\n      // Clone the range\n      var range = selection.getRangeAt(0).cloneRange(); // Collapse the range to the start, so there are not multiple chars selected\n\n      range.collapse(false); // getCientRects returns all the positioning information we need\n\n      var rect = range.getClientRects()[0];\n\n      if (rect) {\n        x = rect.left;\n        y = rect.top;\n      }\n    }\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n};\nexport var setCaretToEnd = function setCaretToEnd(element) {\n  // Create a new range\n  var range = document.createRange(); // Get the selection object\n\n  var selection = window.getSelection(); // Select all the content from the contenteditable element\n\n  range.selectNodeContents(element); // Collapse it to the end, i.e. putting the cursor to the end\n\n  range.collapse(false); // Clear all existing selections\n\n  selection.removeAllRanges(); // Put the new range in place\n\n  selection.addRange(range); // Set the focus to the contenteditable element\n\n  element.focus();\n};","map":{"version":3,"names":["getCaretCoordinates","x","y","isSupported","window","getSelection","selection","rangeCount","range","getRangeAt","cloneRange","collapse","rect","getClientRects","left","top","setCaretToEnd","element","document","createRange","selectNodeContents","removeAllRanges","addRange","focus"],"sources":["/Users/mobvista/cui_workspace/notion/src/utils/caretHelpers.js"],"sourcesContent":["export const getCaretCoordinates = () => {\n  let x, y;\n  const isSupported = typeof window.getSelection !== \"undefined\";\n  if (isSupported) {\n    const selection = window.getSelection();\n    // Check if there is a selection (i.e. cursor in place)\n    if (selection.rangeCount !== 0) {\n      // Clone the range\n      const range = selection.getRangeAt(0).cloneRange();\n      // Collapse the range to the start, so there are not multiple chars selected\n      range.collapse(false);\n      // getCientRects returns all the positioning information we need\n      const rect = range.getClientRects()[0];\n      if (rect) {\n        x = rect.left;\n        y = rect.top;\n      }\n    }\n  }\n  return { x, y };\n};\n\nexport const setCaretToEnd = (element) => {\n  // Create a new range\n  const range = document.createRange();\n  // Get the selection object\n  const selection = window.getSelection();\n  // Select all the content from the contenteditable element\n  range.selectNodeContents(element);\n  // Collapse it to the end, i.e. putting the cursor to the end\n  range.collapse(false);\n  // Clear all existing selections\n  selection.removeAllRanges();\n  // Put the new range in place\n  selection.addRange(range);\n  // Set the focus to the contenteditable element\n  element.focus();\n};\n"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;EACvC,IAAIC,CAAJ,EAAOC,CAAP;EACA,IAAMC,WAAW,GAAG,OAAOC,MAAM,CAACC,YAAd,KAA+B,WAAnD;;EACA,IAAIF,WAAJ,EAAiB;IACf,IAAMG,SAAS,GAAGF,MAAM,CAACC,YAAP,EAAlB,CADe,CAEf;;IACA,IAAIC,SAAS,CAACC,UAAV,KAAyB,CAA7B,EAAgC;MAC9B;MACA,IAAMC,KAAK,GAAGF,SAAS,CAACG,UAAV,CAAqB,CAArB,EAAwBC,UAAxB,EAAd,CAF8B,CAG9B;;MACAF,KAAK,CAACG,QAAN,CAAe,KAAf,EAJ8B,CAK9B;;MACA,IAAMC,IAAI,GAAGJ,KAAK,CAACK,cAAN,GAAuB,CAAvB,CAAb;;MACA,IAAID,IAAJ,EAAU;QACRX,CAAC,GAAGW,IAAI,CAACE,IAAT;QACAZ,CAAC,GAAGU,IAAI,CAACG,GAAT;MACD;IACF;EACF;;EACD,OAAO;IAAEd,CAAC,EAADA,CAAF;IAAKC,CAAC,EAADA;EAAL,CAAP;AACD,CApBM;AAsBP,OAAO,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;EACxC;EACA,IAAMT,KAAK,GAAGU,QAAQ,CAACC,WAAT,EAAd,CAFwC,CAGxC;;EACA,IAAMb,SAAS,GAAGF,MAAM,CAACC,YAAP,EAAlB,CAJwC,CAKxC;;EACAG,KAAK,CAACY,kBAAN,CAAyBH,OAAzB,EANwC,CAOxC;;EACAT,KAAK,CAACG,QAAN,CAAe,KAAf,EARwC,CASxC;;EACAL,SAAS,CAACe,eAAV,GAVwC,CAWxC;;EACAf,SAAS,CAACgB,QAAV,CAAmBd,KAAnB,EAZwC,CAaxC;;EACAS,OAAO,CAACM,KAAR;AACD,CAfM"},"metadata":{},"sourceType":"module"}