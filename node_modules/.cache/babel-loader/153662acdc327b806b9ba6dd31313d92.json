{"ast":null,"code":"import _classCallCheck from \"/Users/mobvista/cui_workspace/notion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mobvista/cui_workspace/notion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/mobvista/cui_workspace/notion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mobvista/cui_workspace/notion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mobvista/cui_workspace/notion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/mobvista/cui_workspace/notion/src/editableBlock.js\";\nimport React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport \"./styles.css\";\nimport SelectMenu from \"./selectMenu\";\nimport { getCaretCoordinates, setCaretToEnd } from \"./utils/caretHelpers\";\nvar CMD_KEY = \"/\";\n\nvar EditableBlock = /*#__PURE__*/function (_React$Component) {\n  _inherits(EditableBlock, _React$Component);\n\n  var _super = _createSuper(EditableBlock);\n\n  function EditableBlock(props) {\n    var _this;\n\n    _classCallCheck(this, EditableBlock);\n\n    _this = _super.call(this, props);\n    _this.onChangeHandler = _this.onChangeHandler.bind(_assertThisInitialized(_this));\n    _this.onKeyDownHandler = _this.onKeyDownHandler.bind(_assertThisInitialized(_this));\n    _this.onKeyUpHandler = _this.onKeyUpHandler.bind(_assertThisInitialized(_this));\n    _this.openSelectMenuHandler = _this.openSelectMenuHandler.bind(_assertThisInitialized(_this));\n    _this.closeSelectMenuHandler = _this.closeSelectMenuHandler.bind(_assertThisInitialized(_this));\n    _this.tagSelectionHandler = _this.tagSelectionHandler.bind(_assertThisInitialized(_this));\n    _this.contentEditable = React.createRef();\n    _this.state = {\n      htmlBackup: null,\n      // needed to store the html temporarely\n      html: \"\",\n      tag: \"p\",\n      previousKey: \"\",\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null\n      }\n    };\n    return _this;\n  }\n\n  _createClass(EditableBlock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        html: this.props.html,\n        tag: this.props.tag\n      });\n    } // Update the page component if one of the following is true:\n    // 1. user has changed the html content\n    // 2. user has changed the tag\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var htmlChanged = prevState.html !== this.state.html;\n      var tagChanged = prevState.tag !== this.state.tag;\n\n      if (htmlChanged || tagChanged) {\n        this.props.updatePage({\n          id: this.props.id,\n          html: this.state.html,\n          tag: this.state.tag\n        });\n      }\n    }\n  }, {\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(e) {\n      this.setState({\n        html: e.target.value\n      });\n    }\n  }, {\n    key: \"onKeyDownHandler\",\n    value: function onKeyDownHandler(e) {\n      if (e.key === CMD_KEY) {\n        // If the user starts to enter a command, we store a backup copy of\n        // the html. We need this to restore a clean version of the content\n        // after the content type selection was finished.\n        this.setState({\n          htmlBackup: this.state.html\n        });\n      }\n\n      if (e.key === \"Enter\") {\n        // While pressing \"Enter\" should add a new block to the page, we\n        // still want to allow line breaks by pressing \"Shift-Enter\"\n        if (this.state.previousKey !== \"Shift\" && !this.state.selectMenuIsOpen) {\n          e.preventDefault();\n          this.props.addBlock({\n            id: this.props.id,\n            ref: this.contentEditable.current\n          });\n        }\n      }\n\n      if (e.key === \"Backspace\" && !this.state.html) {\n        // If there is no content, we delete the block by pressing \"Backspace\",\n        // just as we would remove a line in a regular text container\n        e.preventDefault();\n        this.props.deleteBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current\n        });\n      } // Store the key to detect combinations like \"Shift-Enter\" later on\n\n\n      this.setState({\n        previousKey: e.key\n      });\n    } // The openSelectMenuHandler function needs to be invoked on key up. Otherwise\n    // the calculation of the caret coordinates does not work properly.\n\n  }, {\n    key: \"onKeyUpHandler\",\n    value: function onKeyUpHandler(e) {\n      if (e.key === CMD_KEY) {\n        this.openSelectMenuHandler();\n      }\n    } // After openening the select menu, we attach a click listener to the dom that\n    // closes the menu after the next click - regardless of outside or inside menu.\n\n  }, {\n    key: \"openSelectMenuHandler\",\n    value: function openSelectMenuHandler() {\n      var _getCaretCoordinates = getCaretCoordinates(),\n          x = _getCaretCoordinates.x,\n          y = _getCaretCoordinates.y;\n\n      this.setState({\n        selectMenuIsOpen: true,\n        selectMenuPosition: {\n          x: x,\n          y: y\n        }\n      });\n      document.addEventListener(\"click\", this.closeSelectMenuHandler);\n    }\n  }, {\n    key: \"closeSelectMenuHandler\",\n    value: function closeSelectMenuHandler() {\n      this.setState({\n        htmlBackup: null,\n        selectMenuIsOpen: false,\n        selectMenuPosition: {\n          x: null,\n          y: null\n        }\n      });\n      document.removeEventListener(\"click\", this.closeSelectMenuHandler);\n    } // Restore the clean html (without the command), focus the editable\n    // with the caret being set to the end, close the select menu\n\n  }, {\n    key: \"tagSelectionHandler\",\n    value: function tagSelectionHandler(tag) {\n      var _this2 = this;\n\n      this.setState({\n        tag: tag,\n        html: this.state.htmlBackup\n      }, function () {\n        setCaretToEnd(_this2.contentEditable.current);\n\n        _this2.closeSelectMenuHandler();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.selectMenuIsOpen && /*#__PURE__*/React.createElement(SelectMenu, {\n        position: this.state.selectMenuPosition,\n        onSelect: this.tagSelectionHandler,\n        close: this.closeSelectMenuHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ContentEditable, {\n        className: \"Block\",\n        innerRef: this.contentEditable,\n        html: this.state.html,\n        tagName: this.state.tag,\n        onChange: this.onChangeHandler,\n        onKeyDown: this.onKeyDownHandler,\n        onKeyUp: this.onKeyUpHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return EditableBlock;\n}(React.Component);\n\nexport default EditableBlock;","map":{"version":3,"names":["React","ContentEditable","SelectMenu","getCaretCoordinates","setCaretToEnd","CMD_KEY","EditableBlock","props","onChangeHandler","bind","onKeyDownHandler","onKeyUpHandler","openSelectMenuHandler","closeSelectMenuHandler","tagSelectionHandler","contentEditable","createRef","state","htmlBackup","html","tag","previousKey","selectMenuIsOpen","selectMenuPosition","x","y","setState","prevProps","prevState","htmlChanged","tagChanged","updatePage","id","e","target","value","key","preventDefault","addBlock","ref","current","deleteBlock","document","addEventListener","removeEventListener","Component"],"sources":["/Users/mobvista/cui_workspace/notion/src/editableBlock.js"],"sourcesContent":["import React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\n\nimport \"./styles.css\";\nimport SelectMenu from \"./selectMenu\";\n\nimport { getCaretCoordinates, setCaretToEnd } from \"./utils/caretHelpers\";\n\nconst CMD_KEY = \"/\";\n\nclass EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n    this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n    this.openSelectMenuHandler = this.openSelectMenuHandler.bind(this);\n    this.closeSelectMenuHandler = this.closeSelectMenuHandler.bind(this);\n    this.tagSelectionHandler = this.tagSelectionHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null, // needed to store the html temporarely\n      html: \"\",\n      tag: \"p\",\n      previousKey: \"\",\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ html: this.props.html, tag: this.props.tag });\n  }\n\n  // Update the page component if one of the following is true:\n  // 1. user has changed the html content\n  // 2. user has changed the tag\n  componentDidUpdate(prevProps, prevState) {\n    const htmlChanged = prevState.html !== this.state.html;\n    const tagChanged = prevState.tag !== this.state.tag;\n    if (htmlChanged || tagChanged) {\n      this.props.updatePage({\n        id: this.props.id,\n        html: this.state.html,\n        tag: this.state.tag\n      });\n    }\n  }\n\n  onChangeHandler(e) {\n    this.setState({ html: e.target.value });\n  }\n\n  onKeyDownHandler(e) {\n    if (e.key === CMD_KEY) {\n      // If the user starts to enter a command, we store a backup copy of\n      // the html. We need this to restore a clean version of the content\n      // after the content type selection was finished.\n      this.setState({ htmlBackup: this.state.html });\n    }\n    if (e.key === \"Enter\") {\n      // While pressing \"Enter\" should add a new block to the page, we\n      // still want to allow line breaks by pressing \"Shift-Enter\"\n      if (this.state.previousKey !== \"Shift\" && !this.state.selectMenuIsOpen) {\n        e.preventDefault();\n        this.props.addBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current\n        });\n      }\n    }\n    if (e.key === \"Backspace\" && !this.state.html) {\n      // If there is no content, we delete the block by pressing \"Backspace\",\n      // just as we would remove a line in a regular text container\n      e.preventDefault();\n      this.props.deleteBlock({\n        id: this.props.id,\n        ref: this.contentEditable.current\n      });\n    }\n    // Store the key to detect combinations like \"Shift-Enter\" later on\n    this.setState({ previousKey: e.key });\n  }\n\n  // The openSelectMenuHandler function needs to be invoked on key up. Otherwise\n  // the calculation of the caret coordinates does not work properly.\n  onKeyUpHandler(e) {\n    if (e.key === CMD_KEY) {\n      this.openSelectMenuHandler();\n    }\n  }\n\n  // After openening the select menu, we attach a click listener to the dom that\n  // closes the menu after the next click - regardless of outside or inside menu.\n  openSelectMenuHandler() {\n    const { x, y } = getCaretCoordinates();\n    this.setState({\n      selectMenuIsOpen: true,\n      selectMenuPosition: { x, y }\n    });\n    document.addEventListener(\"click\", this.closeSelectMenuHandler);\n  }\n\n  closeSelectMenuHandler() {\n    this.setState({\n      htmlBackup: null,\n      selectMenuIsOpen: false,\n      selectMenuPosition: { x: null, y: null }\n    });\n    document.removeEventListener(\"click\", this.closeSelectMenuHandler);\n  }\n\n  // Restore the clean html (without the command), focus the editable\n  // with the caret being set to the end, close the select menu\n  tagSelectionHandler(tag) {\n    this.setState({ tag: tag, html: this.state.htmlBackup }, () => {\n      setCaretToEnd(this.contentEditable.current);\n      this.closeSelectMenuHandler();\n    });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.selectMenuIsOpen && (\n          <SelectMenu\n            position={this.state.selectMenuPosition}\n            onSelect={this.tagSelectionHandler}\n            close={this.closeSelectMenuHandler}\n          />\n        )}\n        <ContentEditable\n          className=\"Block\"\n          innerRef={this.contentEditable}\n          html={this.state.html}\n          tagName={this.state.tag}\n          onChange={this.onChangeHandler}\n          onKeyDown={this.onKeyDownHandler}\n          onKeyUp={this.onKeyUpHandler}\n        />\n      </>\n    );\n  }\n}\n\nexport default EditableBlock;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}